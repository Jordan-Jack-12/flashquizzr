// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                     String    @id
  email                  String    @unique
  firstName              String    @map("first_name")
  lastName               String    @map("last_name")
  profileImage           String?   @map("profile_image")
  streak                 Int       @default(1)
  emailVerifiedAt        DateTime? @map("email_verified_at")
  emailVerificationToken String?   @map("email_verification_token")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  decks               Deck[]
  flashcard           Flashcard[]
  daily_study_session DailyStudySession[]
  quiz_session        QuizSession[]

  paddleCustomerId String?        @map("paddle_customer_id")
  subscription     Subscription[]

  @@map("profile")
}

model Subscription {
  id                   String    @id @default(cuid())
  profile              Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId            String    @map("profile_id")
  paddleSubscriptionId String    @map("paddle_subscription_id")
  paddleCustomerId     String    @map("paddle_customer_id")
  plan                 String
  startDate            DateTime  @map("start_date")
  endDate              DateTime? @map("end_date")
  status               String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subscription")
}

model Deck {
  id           String        @id @default(cuid())
  profile      Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String        @map("profile_id")
  name         String
  description  String?
  isPublic     Boolean       @default(false) @map("is_public")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  flashcards   Flashcard[]
  quiz_session QuizSession[]

  @@map("deck")
}

enum FlashcardType {
  BASIC
  MCQ
  CLOZE
  LIST
  IMAGE_OCCLUSION
}

model Flashcard {
  id          String        @id @default(cuid())
  profile     Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String        @map("profile_id")
  deck        Deck          @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId      String        @map("deck_id")
  type        FlashcardType
  front       String
  back        String
  frontImages String[]      @map("front_images")
  backImages  String[]      @map("back_images")
  options     String[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  new          Boolean   @default(true)
  learned      Boolean   @default(false)
  easeFactor   Float     @default(2.5)
  interval     Int       @default(1)
  repetitions  Int       @default(0)
  dueDate      DateTime  @map("due_date")
  lastReviewed DateTime? @map("last_reviewed")
  lapses       Int       @default(0)

  @@map("flashcard")
}

model DailyStudySession {
  id            String  @id @default(cuid())
  profile       Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String  @map("profile_id")
  cardsReviewed Int     @default(0) @map("cards_reviewed")
  accuracy      Int     @default(0)

  @@map("daily_study_session")
}

model QuizSession {
  id        String   @id @default(cuid())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @map("profile_id")
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId    String   @map("deck_id")
  total     Int
  score     Int
  createdAt DateTime @default(now()) @map("created_at")

  @@map("quiz_session")
}

model Post {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String
  description String?
  coverImage  String?  @map("cover_image")
  readTime    Int?     @map("read_time")
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  authorId    String   @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tags Tag[]

  @@map("post")
}

model Tag {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique

  posts Post[]

  @@map("tag")
}
